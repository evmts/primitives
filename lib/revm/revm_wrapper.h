#ifndef REVM_WRAPPER_H
#define REVM_WRAPPER_H

/* Generated with cbindgen:0.24.5 */

/* This file is auto-generated by cbindgen. Do not edit manually. */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

/**
 * Main REVM wrapper struct
 */
typedef struct RevmVm RevmVm;

/**
 * Settings for the REVM execution
 */
typedef struct RevmSettings {
  uint64_t gasLimit;
  uint64_t chainId;
  uint64_t blockNumber;
  uint64_t blockTimestamp;
  uint64_t blockGasLimit;
  uint64_t blockDifficulty;
  uint64_t blockBasefee;
  uint8_t coinbase[20];
} RevmSettings;

/**
 * Error structure for C interop
 */
typedef struct RevmError {
  char *message;
  int32_t code;
} RevmError;

/**
 * Execution result from REVM
 */
typedef struct ExecutionResult {
  bool success;
  uint64_t gasUsed;
  uint64_t gasRefunded;
  uint8_t *outputData;
  uintptr_t outputLen;
  uintptr_t logsCount;
  char *revertReason;
} ExecutionResult;

/**
 * Create a new REVM instance
 */
struct RevmVm *revm_new(const struct RevmSettings *settings, struct RevmError **outError);

/**
 * Free a REVM instance
 */
void revm_free(struct RevmVm *vm);

/**
 * Set account balance
 */
int32_t revm_set_balance(struct RevmVm *vm,
                         const uint8_t *address,
                         const char *balanceHex,
                         struct RevmError **outError);

/**
 * Set account code
 */
int32_t revm_set_code(struct RevmVm *vm,
                      const uint8_t *address,
                      const char *codeHex,
                      struct RevmError **outError);

/**
 * Set storage value
 */
int32_t revm_set_storage(struct RevmVm *vm,
                         const uint8_t *address,
                         const char *slotHex,
                         const char *valueHex,
                         struct RevmError **outError);

/**
 * Execute a transaction
 */
int32_t revm_execute(struct RevmVm *vm,
                     const uint8_t *from,
                     const uint8_t *to,
                     const char *valueHex,
                     const uint8_t *inputData,
                     uintptr_t inputLen,
                     uint64_t gasLimit,
                     struct ExecutionResult **outResult,
                     struct RevmError **outError);

/**
 * Execute a transaction with tracing
 */
int32_t revm_execute_with_trace(struct RevmVm *vm,
                                const uint8_t *from,
                                const uint8_t *to,
                                const char *valueHex,
                                const uint8_t *inputData,
                                uintptr_t inputLen,
                                uint64_t gasLimit,
                                const char *tracePath,
                                struct ExecutionResult **outResult,
                                struct RevmError **outError);

/**
 * Get error message
 */
const char *revm_get_error_message(const struct RevmError *error);

/**
 * Free an error
 */
void revm_free_error(struct RevmError *error);

/**
 * Free an execution result
 */
void revm_free_result(struct ExecutionResult *result);

/**
 * Get storage value
 */
int32_t revm_get_storage(struct RevmVm *vm,
                         const uint8_t *address,
                         const char *slotHex,
                         char *outValue,
                         uintptr_t outValueLen,
                         struct RevmError **outError);

/**
 * Get account balance
 */
int32_t revm_get_balance(struct RevmVm *vm,
                         const uint8_t *address,
                         char *outBalance,
                         uintptr_t outBalanceLen,
                         struct RevmError **outError);

/**
 * KECCAK256 hash using assembly-optimized implementation
 *
 * This function provides a high-performance KECCAK256 hash using the assembly-optimized
 * keccak-asm crate, which is significantly faster than the standard library implementation.
 */
int32_t keccak256_asm(const uint8_t *dataPtr,
                      uintptr_t dataLen,
                      uint8_t *outHash,
                      struct RevmError **outError);

/**
 * Batch KECCAK256 hash multiple inputs using assembly optimization
 *
 * This function hashes multiple inputs in a single call, which can be more efficient
 * than calling keccak256_asm multiple times due to reduced FFI overhead.
 */
int32_t keccak256_asm_batch(const uint8_t *const *inputsPtr,
                            const uintptr_t *inputsLen,
                            uintptr_t numInputs,
                            uint8_t *outHashes,
                            struct RevmError **outError);

/**
 * Convenience function to hash a hex string and return the result as hex
 *
 * This is useful for testing and situations where you have hex-encoded data.
 */
int32_t keccak256_hex(const char *hexInput,
                      char *outHexHash,
                      uintptr_t outHexLen,
                      struct RevmError **outError);

#endif /* REVM_WRAPPER_H */
